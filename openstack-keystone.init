#!/bin/sh
#
# keystone  OpenStack Identity Service
#
# chkconfig:   - 98 02
# description: keystone works provide apis to  \
#		* Authenticate users and provide a token \
#		* Validate tokens
### END INIT INFO

. /etc/rc.d/init.d/functions

prog=keystone
exec="/usr/bin/$prog-all"
config="/etc/$prog/$prog.conf"
pidfile="/var/run/$prog/$prog.pid"

[ -e /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog

lockfile=/var/lock/subsys/$prog

keystone_available()
{
    keystone discover 2>&1 | grep -qFi "Keystone found"
}

# Wait at most 10s for the service to become available
wait_until_keystone_available()
{
    tries=0
    until keystone_available; do
        rh_status_q || return 1
        tries=$(($tries + 1))
        [ $tries -eq 20 ] && { echo 'Aborting wait for keystone to start' >&2; return 1; }
        sleep .5
    done

    return 0;
}

start() {
    [ -x $exec ] || exit 5
    [ -f $config ] || exit 6
    echo -n $"Starting $prog: "
    daemon --user keystone --pidfile $pidfile "$exec --config-file $config &>/dev/null & echo \$! > $pidfile"
    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile
    [ $retval -eq 0 ] && wait_until_keystone_available
    return $retval
}

stop() {
    echo -n $"Stopping $prog: "
    killproc -p $pidfile $prog
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart() {
    stop
    start
}

reload() {
    restart
}

force_reload() {
    restart
}

rh_status() {
    status -p $pidfile $prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}


case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
esac
exit $?
